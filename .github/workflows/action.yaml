name: "Main Action"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
jobs:
  test:
    # Runs pytest and black formatting tool
    runs-on: nicleary-ubuntu-k8s
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker build
        run: docker build -t shop_gen_test:${{ github.run_number }} -f Dockerfile.test .

      - name: Run tests
        run: docker run --name pytest shop_gen_test:${{ github.run_number }}

  build:
    runs-on: nicleary-ubuntu-k8s
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          registry: harbor.nicleary.com

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: harbor.nicleary.com/library/shop_gen:${{ github.run_number }}
          file: Dockerfile

  trivy:
    needs: build
    runs-on: nicleary-ubuntu-k8s
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nicklesbread/shop_gen:${{ github.run_number }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  semgrep:
    name: Semgrep
    runs-on: nicleary-ubuntu-k8s
    needs: build
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci --sarif --output=semgrep.sarif

      - name: Upload SARIF file for GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
        if: always()

  codeql:
    needs: build
    name: Analyze
    runs-on: nicleary-ubuntu-k8s
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
  
  deploy:
    needs: 
      - build
      - test
      - trivy
      - semgrep
      - codeql
    name: Deploy
    runs-on: nicleary-ubuntu-k8s
    container: harbor.nicleary.com/dockerhub/dtzar/helm-kubectl:3.12.0
    environment: 
      name: Production
      url: https://shopgen.nicleary.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run kubectl
        run: |
          echo ${{ secrets.RANCHER_KUBECONFIG }} | base64 -d > kube.config
          kubectl --kubeconfig kube.config config get-contexts
          helm dependency build ./chart/shopgen
          helm upgrade -i shopgen-postgres oci://harbor.nicleary.com/dockerhub/bitnamicharts/postgresql --values ./postgres-values.yaml -n shopgen --set auth.password=${{ secrets.POSTGRES_PASSWORD }} --wait --create-namespace
          helm upgrade -i shopgen ./chart/shopgen -n shopgen --create-namespace --values ./chart/shopgen/values.yaml --set image.tag=${{ github.run_number }} --wait